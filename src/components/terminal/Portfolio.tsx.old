
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  DollarSign, 
  Wallet,
  RefreshCw,
  Eye,
  EyeOff,
  ArrowUpRight,
  ArrowDownRight
} from 'lucide-react';

import { useMetaMaskPortfolio } from '../../hooks/useMetaMaskPortfolio';
            className="text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
          >
            <div className="text-sm text-slate-400 mb-1">24h Change</div>
            <div className={`text-2xl font-bold mb-2 flex items-center justify-center space-x-1 ${
              isProfit ? 'text-green-400' : 'text-red-400'
            }`}>
              {isProfit ? (
                <ArrowUpRight className="w-5 h-5" />
              ) : (
                <ArrowDownRight className="w-5 h-5" />
              )}
              <span>
                {showBalances ? (
                  `${isProfit ? '+' : ''}$${Math.abs(displayData.totalPnL24h).toFixed(2)}`
                ) : (
                  '••••••'
                )}
              </span>
            </div>
            <div className={`text-sm ${isProfit ? 'text-green-400' : 'text-red-400'}`}>
              {showBalances ? (
                `${isProfit ? '+' : ''}${displayData.pnlPercentage.toFixed(2)}%`
              ) : (
                '••••'
              )}
            </div>
          </motion.div>  PieChart, 
  BarChart3,
  Wallet,
  RefreshCw,
  Eye,
  EyeOff,
  ArrowUpRight,
  ArrowDownRight
} from 'lucide-react';

import { useMetaMaskPortfolio } from '../../hooks/useMetaMaskPortfolio';
import type { TokenBalance } from '../../types/api';

interface PortfolioSummaryProps {
  walletAddress?: string;
  detailed?: boolean;
  isLoading?: boolean;
  className?: string;
}

const PortfolioSummary: React.FC<PortfolioSummaryProps> = ({ 
  walletAddress,
  detailed = false,
  isLoading = false,
  className = '' 
}) => {
  const [showBalances, setShowBalances] = useState(true);
  const [selectedChain, setSelectedChain] = useState<string>('all');

  const portfolioData = useMetaMaskPortfolio();
  
  // Transform MetaMask portfolio data into the expected format
  const displayData = {
    totalValueUSD: parseFloat(portfolioData.totalValueUSD),
    totalPnL24h: portfolioData.tokens.reduce((sum, token) => sum + (parseFloat(token.balanceUSD) * (token.change24h / 100)), 0),
    pnlPercentage: portfolioData.tokens.reduce((sum, token) => sum + token.change24h, 0) / portfolioData.tokens.length,
    chains: [
      {
        chainId: 1,
        name: 'Ethereum',
        totalValueUSD: portfolioData.totalValueUSD,
        tokens: portfolioData.tokens.map(token => ({
          ...token,
          logoURI: `/tokens/${token.symbol.toLowerCase()}.png`
        }))
      }
    ]
  };
  const isProfit = displayData.totalPnL24h >= 0;

  if (!walletAddress) {
    return (
      <div className={`bg-slate-800/50 border border-slate-700/50 rounded-xl p-6 ${className}`}>
        <div className="text-center py-8">
          <Wallet className="w-12 h-12 text-slate-500 mx-auto mb-3" />
          <h3 className="text-lg font-semibold text-slate-400 mb-2">
            Connect Your Wallet
          </h3>
          <p className="text-sm text-slate-500">
            View your cross-chain portfolio and track performance
          </p>
          <button className="mt-4 px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded-lg transition-colors">
            Connect Wallet
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-slate-800/50 border border-slate-700/50 rounded-xl backdrop-blur-sm ${className}`}>
      {/* Header */}
      <div className="p-6 border-b border-slate-700/50">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-green-900/30 rounded-lg">
              <DollarSign className="w-5 h-5 text-green-400" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-green-400">
                Portfolio Overview
              </h3>
              <p className="text-sm text-slate-400">
                Cross-chain asset tracking
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <button
              onClick={() => setShowBalances(!showBalances)}
              className="p-2 hover:bg-slate-700/50 rounded-lg transition-colors"
            >
              {showBalances ? (
                <Eye className="w-4 h-4 text-slate-400" />
              ) : (
                <EyeOff className="w-4 h-4 text-slate-400" />
              )}
            </button>
            
            <motion.button
              onClick={refreshPortfolio}
              className="p-2 hover:bg-slate-700/50 rounded-lg transition-colors"
              whileTap={{ rotate: 180 }}
              disabled={isLoading}
            >
              <RefreshCw className={`w-4 h-4 text-slate-400 ${isLoading ? 'animate-spin' : ''}`} />
            </motion.button>
          </div>
        </div>
      </div>

      {/* Métriques principales */}
      <div className="p-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          {/* Valeur totale */}
          <motion.div 
            className="text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
          >
            <div className="text-sm text-slate-400 mb-1">Total Portfolio Value</div>
            <div className="text-3xl font-bold text-white mb-2">
              {showBalances ? (
                `$${(portfolio?.totalValueUSD || mockPortfolioData.totalValueUSD).toLocaleString()}`
              ) : (
                '••••••••'
              )}
            </div>
            <div className="text-xs text-slate-500">
              Across {displayData.chains?.length || 0} chains
            </div>
          </motion.div>

          {/* P&L 24h */}
          <motion.div 
            className="text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
          >
            <div className="text-sm text-slate-400 mb-1">24h Change</div>
            <div className={`text-2xl font-bold mb-2 flex items-center justify-center space-x-1 ${
              isProfit ? 'text-green-400' : 'text-red-400'
            }`}>
              {isProfit ? (
                <ArrowUpRight className="w-5 h-5" />
              ) : (
                <ArrowDownRight className="w-5 h-5" />
              )}
              <span>
                {showBalances ? (
                  `${isProfit ? '+' : ''}$${Math.abs(portfolio?.totalPnL24h || mockPortfolioData.totalPnL24h).toFixed(2)}`
                ) : (
                  '•••••'
                )}
              </span>
            </div>
            <div className={`text-xs ${isProfit ? 'text-green-400' : 'text-red-400'}`}>
              {showBalances ? (
                `${isProfit ? '+' : ''}${(portfolio?.pnlPercentage || mockPortfolioData.pnlPercentage).toFixed(2)}%`
              ) : (
                '••••'
              )}
            </div>
          </motion.div>

          {/* Nombre d'assets */}
          <motion.div 
            className="text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <div className="text-sm text-slate-400 mb-1">Assets</div>
            <div className="text-2xl font-bold text-white mb-2">
              {displayData.chains?.reduce((sum, chain) => sum + (chain.tokens?.length || 0), 0) || 0}
            </div>
            <div className="text-xs text-slate-500">
              Unique tokens
            </div>
          </motion.div>
        </div>

        {/* Sélecteur de chaîne (si detailed) */}
        {detailed && (
          <div className="flex items-center space-x-2 mb-6">
            <span className="text-sm text-slate-400">Filter by chain:</span>
            <div className="flex space-x-1">
              <button
                onClick={() => setSelectedChain('all')}
                className={`px-3 py-1 rounded-lg text-sm transition-colors ${
                  selectedChain === 'all'
                    ? 'bg-blue-600/30 text-blue-400 border border-blue-600/50'
                    : 'bg-slate-700/30 text-slate-400 hover:text-white'
                }`}
              >
                All Chains
              </button>
              {displayData.chains?.map(chain => (
                <button
                  key={chain.chainId}
                  onClick={() => setSelectedChain(chain.chainId.toString())}
                  className={`px-3 py-1 rounded-lg text-sm transition-colors ${
                    selectedChain === chain.chainId.toString()
                      ? 'bg-blue-600/30 text-blue-400 border border-blue-600/50'
                      : 'bg-slate-700/30 text-slate-400 hover:text-white'
                  }`}
                >
                  {chain.name}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Liste des tokens */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <h4 className="text-sm font-semibold text-slate-300">
              {detailed ? 'All Assets' : 'Top Assets'}
            </h4>
            {!detailed && (
              <button className="text-xs text-blue-400 hover:text-blue-300 transition-colors">
                View All →
              </button>
            )}
          </div>

          <div className="space-y-2">
            {displayData.chains
              ?.filter(chain => selectedChain === 'all' || chain.chainId.toString() === selectedChain)
              .flatMap(chain => 
                chain.tokens?.map(token => ({ ...token, chainName: chain.name })) || []
              )
              .slice(0, detailed ? undefined : 5)
              .map((token, index) => (
                <motion.div
                  key={`${token.address}-${index}`}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.05 }}
                  className="flex items-center justify-between p-3 bg-slate-900/50 hover:bg-slate-900/70 rounded-lg border border-slate-700/30 transition-all group"
                >
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center">
                      <span className="text-white font-bold text-sm">
                        {token.symbol.slice(0, 3)}
                      </span>
                    </div>
                    
                    <div>
                      <div className="flex items-center space-x-2">
                        <span className="font-semibold text-white">{token.symbol}</span>
                        <span className="text-xs text-slate-400">on {token.chainName}</span>
                      </div>
                      <div className="text-sm text-slate-400">
                        {showBalances ? (
                          `${parseFloat(token.balance).toLocaleString()} ${token.symbol}`
                        ) : (
                          '••••••••'
                        )}
                      </div>
                    </div>
                  </div>

                  <div className="text-right">
                    <div className="font-semibold text-white">
                      {showBalances ? `$${parseFloat(token.balanceUSD).toLocaleString()}` : '•••••'}
                    </div>
                    <div className={`text-sm flex items-center space-x-1 ${
                      token.change24h >= 0 ? 'text-green-400' : 'text-red-400'
                    }`}>
                      {token.change24h >= 0 ? (
                        <TrendingUp className="w-3 h-3" />
                      ) : (
                        <TrendingDown className="w-3 h-3" />
                      )}
                      <span>{Math.abs(token.change24h).toFixed(2)}%</span>
                    </div>
                  </div>
                </motion.div>
              ))}
          </div>
        </div>

        {/* Répartition par chaîne (si detailed) */}
        {detailed && (
          <div className="mt-6 pt-6 border-t border-slate-700/50">
            <h4 className="text-sm font-semibold text-slate-300 mb-4">
              Chain Distribution
            </h4>
            
            <div className="space-y-3">
              {displayData.chains?.map((chain, index) => {
                const percentage = ((parseFloat(chain.totalValueUSD) / (portfolio?.totalValueUSD || mockPortfolioData.totalValueUSD)) * 100);
                
                return (
                  <div key={chain.chainId} className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-white">{chain.name}</span>
                      <span className="text-slate-400">
                        {showBalances ? `$${parseFloat(chain.totalValueUSD).toLocaleString()}` : '•••••'} 
                        ({percentage.toFixed(1)}%)
                      </span>
                    </div>
                    
                    <div className="h-2 bg-slate-700 rounded-full overflow-hidden">
                      <motion.div
                        className={`h-full rounded-full ${
                          index === 0 ? 'bg-gradient-to-r from-blue-500 to-cyan-500' :
                          index === 1 ? 'bg-gradient-to-r from-purple-500 to-pink-500' :
                          'bg-gradient-to-r from-green-500 to-emerald-500'
                        }`}
                        initial={{ width: 0 }}
                        animate={{ width: `${percentage}%` }}
                        transition={{ duration: 1, delay: index * 0.2 }}
                      />
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </div>

      {/* Footer */}
      <div className="p-4 border-t border-slate-700/50 bg-slate-900/30">
        <div className="flex items-center justify-between text-xs text-slate-400">
          <span>💼 Multi-chain portfolio tracking</span>
          <div className="flex items-center space-x-2">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
            <span>Live prices</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PortfolioSummary;