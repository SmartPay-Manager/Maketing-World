// components/termiimport { useState, useMemo } from 'react';
import { motion } from 'framer-motion';
import { 
  BarChart3, 
  Activity,
  Globe,
  Filter,
  ArrowUpRight,
  ArrowDownRight,
  ExternalLink,
  Eye
} from 'lucide-react';

import type { MarketData } from '../../types/api';
import { formatCurrency, formatPercentage, getPriceChangeColor } from '../../utils/formatters';

interface MarketOverviewProps {
  marketData: Record<string, MarketData>;
  className?: string;
}

type FilterType = 'all' | 'gainers' | 'losers';
type TimeframeType = '1h' | '24h' | '7d';
  const mockMarketData = React.useMemo(() => {
    return [
      {
        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
        symbol: 'WETH',
        price: '2001.50',
        priceChange24h: 2.1,
        volume24h: '1250000000',
        marketCap: '241800000000',
        liquidity: { 
          usd: '500000000', 
          base: '250000', 
          quote: '500000000' 
        },
        lastUpdated: Date.now(),
        high24h: 2050.75,
        low24h: 1985.25,
        change24h: 2.1
      },semble du marché
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
   
  BarChart3, 
  Activity,
  Globe,
  Filter,
  ArrowUpRight,
  ArrowDownRight,
  ExternalLink,
  Eye
} from 'lucide-react';

import type { MarketData } from '../../types/api';
import { formatCurrency, formatPercentage, getPriceChangeColor } from '../../utils/formatters';

interface MarketOverviewProps {
  marketData: Record<string, MarketData>;
  className?: string;
}

const MarketOverview: React.FC<MarketOverviewProps> = ({ 
  marketData,
  className = '' 
}) => {
  type FilterType = 'all' | 'gainers' | 'losers';
  type TimeframeType = '1h' | '24h' | '7d';

  const [filter, setFilter] = useState<FilterType>('all');
  const [timeframe, setTimeframe] = useState<TimeframeType>('24h');

  // Sample data for demo and testing
  const mockMarketData = React.useMemo(() => (
    [
      {
        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
        symbol: 'WETH',
        price: '2001.50',
        priceChange24h: 2.1,
        volume24h: '1250000000',
        marketCap: '241800000000',
        liquidity: { 
          usd: '500000000', 
          base: '250000', 
          quote: '500000000' 
        },
        lastUpdated: Date.now(),
        high24h: 2050.75,
        low24h: 1985.25,
        change24h: 2.1
      },
    {
      address: '0xA0b86a33E6885D0c5906C0Ae01fAec12E7e9B85E',
      symbol: 'USDC',
      price: '1.00',
      priceChange24h: 0.02,
      volume24h: '2100000000',
      marketCap: '32500000000',
      liquidity: { usd: '800000000', base: '800000000', quote: '800000000' },
      lastUpdated: Date.now()
    },
    {
      address: 'rXRPXRPXRPXRPXRPXRPXRPXRPXRPXRPXRPXRP',
      symbol: 'XRP',
      price: '0.507',
      priceChange24h: 5.7,
      volume24h: '890000000',
      marketCap: '28400000000',
      liquidity: { usd: '150000000', base: '295857988', quote: '150000000' },
      lastUpdated: Date.now()
    },
    {
      address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',
      symbol: 'DAI',
      price: '0.999',
      priceChange24h: -0.1,
      volume24h: '156000000',
      marketCap: '5200000000',
      liquidity: { usd: '200000000', base: '200200200', quote: '200000000' },
      lastUpdated: Date.now()
    },
    {
      address: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
      symbol: 'WBTC',
      price: '43250.00',
      priceChange24h: 1.8,
      volume24h: '425000000',
      marketCap: '8750000000',
      liquidity: { usd: '120000000', base: '2775', quote: '120000000' },
      lastUpdated: Date.now()
    },
    {
      address: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',
      symbol: 'UNI',
      price: '8.45',
      priceChange24h: -3.2,
      volume24h: '78000000',
      marketCap: '6400000000',
      liquidity: { usd: '45000000', base: '5325444', quote: '45000000' },
      lastUpdated: Date.now()
    },
    {
      address: '0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0',
      symbol: 'MATIC',
      price: '0.421',
      priceChange24h: 4.3,
      volume24h: '234000000',
      marketCap: '4100000000',
      liquidity: { usd: '67000000', base: '159144588', quote: '67000000' },
      lastUpdated: Date.now()
    },
    {
      address: '0x514910771AF9Ca656af840dff83E8264EcF986CA',
      symbol: 'LINK',
      price: '14.82',
      priceChange24h: -1.5,
      volume24h: '156000000',
      marketCap: '8900000000',
      liquidity: { usd: '78000000', base: '5263158', quote: '78000000' },
      lastUpdated: Date.now()
    }
    ] as MarketData[]
  ), []); // Empty dependency array since mock data never changes

  // Combine real data with mock data for demo purposes
  const allMarketData = React.useMemo(() => {
    const realTokens = Object.values(marketData);
    const mockTokens = mockMarketData.filter(mock => !marketData[mock.address]);
    return [...realTokens, ...mockTokens];
  }, [marketData, mockMarketData]);

  // Filter and sort market data
  const filteredData = React.useMemo(() => {
    return allMarketData
      .filter(data => {
        if (filter === 'gainers') return data.priceChange24h > 0;
        if (filter === 'losers') return data.priceChange24h < 0;
        return true;
      })
      .sort((a, b) => {
        if (filter === 'gainers') return b.priceChange24h - a.priceChange24h;
        if (filter === 'losers') return a.priceChange24h - b.priceChange24h;
        return parseFloat(b.marketCap) - parseFloat(a.marketCap);
      });
  }, [allMarketData, filter]);

  // Calculate market statistics
  const marketStats = React.useMemo(() => ({
    totalMarketCap: allMarketData.reduce((sum, data) => sum + parseFloat(data.marketCap), 0),
    totalVolume24h: allMarketData.reduce((sum, data) => sum + parseFloat(data.volume24h), 0),
    gainersCount: allMarketData.filter(data => data.priceChange24h > 0).length,
    losersCount: allMarketData.filter(data => data.priceChange24h < 0).length,
    avgChange: allMarketData.reduce((sum, data) => sum + data.priceChange24h, 0) / allMarketData.length
  }), [allMarketData]);

  // Fonction pour obtenir le nom de la blockchain
  const getChainName = (symbol: string, address: string) => {
    if (symbol === 'XRP' || address.startsWith('r')) return 'XRP Ledger';
    if (address.startsWith('0x')) return 'Ethereum';
    return 'Unknown';
  };

  // Fonction pour gérer le clic sur un asset
  const handleAssetClick = (asset: MarketData) => {
    console.log('Asset clicked:', asset);
    // Ici vous pourriez ouvrir un modal détaillé ou naviguer vers une page dédiée
  };

  return (
    <div className={`bg-slate-800/50 border border-slate-700/50 rounded-xl backdrop-blur-sm ${className}`}>
      {/* Header */}
      <div className="p-6 border-b border-slate-700/50">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-blue-900/30 rounded-lg">
              <Globe className="w-5 h-5 text-blue-400" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-blue-400">
                Market Overview
              </h3>
              <p className="text-sm text-slate-400">
                Cross-chain market data
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
            <span className="text-xs text-green-400">Live Data</span>
          </div>
        </div>

        {/* Stats globales */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mt-4 p-4 bg-slate-900/50 rounded-lg">
          <div className="text-center">
            <div className="text-lg font-bold text-blue-400">
              {formatCurrency(marketStats.totalMarketCap, { compact: true })}
            </div>
            <div className="text-xs text-slate-400">Total Market Cap</div>
          </div>
          
          <div className="text-center">
            <div className="text-lg font-bold text-green-400">
              {formatCurrency(marketStats.totalVolume24h, { compact: true })}
            </div>
            <div className="text-xs text-slate-400">24h Volume</div>
          </div>
          
          <div className="text-center">
            <div className={`text-lg font-bold ${marketStats.avgChange >= 0 ? 'text-green-400' : 'text-red-400'}`}>
              {formatPercentage(marketStats.avgChange)}
            </div>
            <div className="text-xs text-slate-400">Avg Change</div>
          </div>
          
          <div className="text-center">
            <div className="text-lg font-bold text-slate-300">
              <span className="text-green-400">{marketStats.gainersCount}</span>
              <span className="text-slate-500 mx-1">/</span>
              <span className="text-red-400">{marketStats.losersCount}</span>
            </div>
            <div className="text-xs text-slate-400">Gainers/Losers</div>
          </div>
        </div>

        {/* Filtres et timeframe */}
        <div className="flex items-center justify-between mt-4">
          <div className="flex items-center space-x-2">
            <Filter className="w-4 h-4 text-slate-400" />
            <div className="flex space-x-1">
              {[
                { id: 'all' as const, label: 'All Assets' },
                { id: 'gainers' as const, label: 'Gainers', count: marketStats.gainersCount },
                { id: 'losers' as const, label: 'Losers', count: marketStats.losersCount }
              ].map(filterOption => (
                <button
                  key={filterOption.id}
                  onClick={() => setFilter(filterOption.id)}
                  className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                    filter === filterOption.id
                      ? 'bg-blue-600/30 text-blue-400 border border-blue-600/50'
                      : 'bg-slate-700/30 text-slate-400 hover:text-white hover:bg-slate-600/30'
                  }`}
                >
                  {filterOption.label}
                  {filterOption.count !== undefined && (
                    <span className="ml-1 text-xs opacity-75">({filterOption.count})</span>
                  )}
                </button>
              ))}
            </div>
          </div>

          <div className="flex space-x-1">
            {(['1h', '24h', '7d'] as const).map(tf => (
              <button
                key={tf}
                onClick={() => setTimeframe(tf)}
                className={`px-3 py-1 rounded-lg text-sm transition-colors ${
                  timeframe === tf
                    ? 'bg-slate-600 text-white'
                    : 'text-slate-400 hover:text-white'
                }`}
              >
                {tf}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Table des assets */}
      <div className="p-6">
        {filteredData.length > 0 ? (
          <div className="space-y-2">
            {/* Header de table */}
            <div className="grid grid-cols-12 gap-4 px-4 py-2 text-xs font-semibold text-slate-400 border-b border-slate-700/50">
              <div className="col-span-3">Asset</div>
              <div className="col-span-2 text-right">Price</div>
              <div className="col-span-2 text-right">24h Change</div>
              <div className="col-span-2 text-right">Volume</div>
              <div className="col-span-2 text-right">Market Cap</div>
              <div className="col-span-1 text-right">Actions</div>
            </div>

            {/* Rows des assets */}
            {filteredData.slice(0, 12).map((asset, index) => (
              <motion.div
                key={asset.address}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.05 }}
                className="grid grid-cols-12 gap-4 px-4 py-3 rounded-lg hover:bg-slate-900/50 transition-colors group cursor-pointer"
                onClick={() => handleAssetClick(asset)}
              >
                {/* Asset */}
                <div className="col-span-3 flex items-center space-x-3">
                  <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-lg flex items-center justify-center">
                    <span className="text-white font-bold text-xs">
                      {asset.symbol.slice(0, 3)}
                    </span>
                  </div>
                  <div>
                    <div className="font-semibold text-white">{asset.symbol}</div>
                    <div className="text-xs text-slate-400">
                      {getChainName(asset.symbol, asset.address)}
                    </div>
                  </div>
                </div>

                {/* Price */}
                <div className="col-span-2 text-right">
                  <div className="font-semibold text-white">
                    ${parseFloat(asset.price).toLocaleString(undefined, {
                      minimumFractionDigits: parseFloat(asset.price) < 1 ? 3 : 2,
                      maximumFractionDigits: parseFloat(asset.price) < 1 ? 6 : 2
                    })}
                  </div>
                </div>

                {/* 24h Change */}
                <div className="col-span-2 text-right">
                  <div className={`flex items-center justify-end space-x-1 font-semibold ${getPriceChangeColor(asset.priceChange24h)}`}>
                    {asset.priceChange24h >= 0 ? (
                      <ArrowUpRight className="w-3 h-3" />
                    ) : (
                      <ArrowDownRight className="w-3 h-3" />
                    )}
                    <span>{formatPercentage(Math.abs(asset.priceChange24h))}</span>
                  </div>
                </div>

                {/* Volume 24h */}
                <div className="col-span-2 text-right">
                  <div className="font-medium text-slate-300">
                    {formatCurrency(parseFloat(asset.volume24h), { compact: true })}
                  </div>
                </div>

                {/* Market Cap */}
                <div className="col-span-2 text-right">
                  <div className="font-medium text-slate-300">
                    {formatCurrency(parseFloat(asset.marketCap), { compact: true })}
                  </div>
                </div>

                {/* Actions */}
                <div className="col-span-1 text-right">
                  <div className="flex items-center justify-end space-x-1 opacity-0 group-hover:opacity-100 transition-opacity">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        console.log('View details for:', asset.symbol);
                      }}
                      className="p-1 hover:bg-slate-700 rounded"
                      title="View Details"
                    >
                      <Eye className="w-3 h-3 text-slate-400" />
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        window.open(`https://etherscan.io/address/${asset.address}`, '_blank');
                      }}
                      className="p-1 hover:bg-slate-700 rounded"
                      title="View on Explorer"
                    >
                      <ExternalLink className="w-3 h-3 text-slate-400" />
                    </button>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        ) : (
          // État vide quand aucun asset ne correspond aux filtres
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-slate-700/50 rounded-full flex items-center justify-center mx-auto mb-4">
              <BarChart3 className="w-8 h-8 text-slate-400" />
            </div>
            <h4 className="text-lg font-medium text-slate-300 mb-2">
              No assets found
            </h4>
            <p className="text-slate-500 mb-4">
              Try adjusting your filters to see more results.
            </p>
            <button
              onClick={() => setFilter('all')}
              className="px-4 py-2 bg-blue-600/20 text-blue-400 rounded-lg hover:bg-blue-600/30 transition-colors"
            >
              Show All Assets
            </button>
          </div>
        )}
      </div>

      {/* Footer avec informations supplémentaires */}
      <div className="px-6 py-4 border-t border-slate-700/50 bg-slate-900/30">
        <div className="flex items-center justify-between text-xs text-slate-400">
          <div className="flex items-center space-x-4">
            <span>Showing {Math.min(filteredData.length, 12)} of {allMarketData.length} assets</span>
            <span>•</span>
            <span>Updated {new Date().toLocaleTimeString()}</span>
          </div>
          
          <div className="flex items-center space-x-2">
            <Activity className="w-3 h-3" />
            <span>Real-time data via WebSocket</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MarketOverview;