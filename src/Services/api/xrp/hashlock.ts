// src/services/api/xrp/hashlock.ts
import CryptoJS from 'crypto-js';

/**
 * Service de gestion des hashlocks et timelocks pour les atomic swaps
 * 
 * Cette classe encapsule toute la logique cryptographique n√©cessaire pour
 * impl√©menter des atomic swaps s√©curis√©s entre diff√©rentes blockchains.
 * Elle fournit les primitives de base qui seront utilis√©es par les couches
 * sup√©rieures pour orchestrer les swaps cross-chain.
 */

// Interface pour repr√©senter un hashlock complet avec ses m√©tadonn√©es
export interface HashlockData {
  secret: string;           // Le secret original (gard√© priv√© jusqu'√† la r√©v√©lation)
  hash: string;            // Le hash du secret (partag√© publiquement)
  algorithm: string;       // L'algorithme de hashage utilis√©
  createdAt: number;       // Timestamp de cr√©ation pour le suivi
  expiresAt?: number;      // Timestamp d'expiration optionnel
}

// Interface pour les param√®tres de timelock
export interface TimelockParams {
  finishAfter: number;     // Timestamp minimum pour terminer l'operation
  cancelAfter: number;     // Timestamp apr√®s lequel l'op√©ration peut √™tre annul√©e
  currentTime?: number;    // Timestamp actuel (pour les tests et simulations)
}

// √ânum√©ration des statuts possibles d'un timelock
export enum TimelockStatus {
  LOCKED = 'locked',           // P√©riode d'attente, aucune action possible
  EXECUTABLE = 'executable',   // Peut √™tre ex√©cut√© mais pas encore annul√©
  EXPIRED = 'expired',         // Peut √™tre annul√© mais plus ex√©cut√©
  COMPLETED = 'completed',     // D√©j√† ex√©cut√© avec succ√®s
  CANCELLED = 'cancelled'      // D√©j√† annul√©
}

export class HashlockManager {
  private static readonly DEFAULT_SECRET_LENGTH = 32; // 32 bytes pour la s√©curit√©
  private static readonly SUPPORTED_ALGORITHMS = ['SHA256', 'SHA512'];

  /**
   * G√©n√®re un nouveau hashlock avec un secret cryptographiquement s√©curis√©
   * 
   * Cette m√©thode cr√©e un secret al√©atoire et calcule son hash correspondant.
   * Le secret doit √™tre gard√© confidentiel jusqu'au moment de la r√©v√©lation,
   * tandis que le hash peut √™tre partag√© publiquement pour √©tablir l'engagement.
   */
  static generateHashlock(
    algorithm: string = 'SHA256',
    secretLength: number = HashlockManager.DEFAULT_SECRET_LENGTH
  ): HashlockData {
    // Validation des param√®tres d'entr√©e
    if (!HashlockManager.SUPPORTED_ALGORITHMS.includes(algorithm)) {
      throw new Error(`Algorithme de hashage non support√©: ${algorithm}`);
    }

    if (secretLength < 16 || secretLength > 64) {
      throw new Error(`Longueur de secret invalide: ${secretLength}. Doit √™tre entre 16 et 64 bytes.`);
    }

    // G√©n√©ration d'un secret cryptographiquement s√©curis√©
    // Nous utilisons une combinaison de sources d'entropie pour maximiser la s√©curit√©
    const timestamp = Date.now().toString();
    const randomBytes = CryptoJS.lib.WordArray.random(secretLength);
    const additionalEntropy = Math.random().toString(36).substring(2);
    
    // Combinaison des sources d'entropie pour cr√©er le secret final
    const combinedEntropy = timestamp + randomBytes.toString() + additionalEntropy;
    const secret = CryptoJS.SHA256(combinedEntropy).toString().substring(0, secretLength * 2);

    // Calcul du hash selon l'algorithme sp√©cifi√©
    let hash: string;
    switch (algorithm) {
      case 'SHA256':
        hash = CryptoJS.SHA256(secret).toString();
        break;
      case 'SHA512':
        hash = CryptoJS.SHA512(secret).toString();
        break;
      default:
        throw new Error(`Impl√©mentation manquante pour l'algorithme: ${algorithm}`);
    }

    const hashlockData: HashlockData = {
      secret,
      hash,
      algorithm,
      createdAt: Date.now()
    };

    console.log(`‚úÖ Hashlock g√©n√©r√© avec ${algorithm}: ${hash.substring(0, 16)}...`);
    
    return hashlockData;
  }

  /**
   * V√©rifie qu'un secret correspond bien √† un hash donn√©
   * 
   * Cette m√©thode est cruciale pour la s√©curit√© des atomic swaps car elle
   * permet de valider que la r√©v√©lation du secret est authentique avant
   * de proc√©der au transfert des fonds.
   */
  static verifySecret(
    secret: string,
    expectedHash: string,
    algorithm: string = 'SHA256'
  ): boolean {
    try {
      // Validation des param√®tres d'entr√©e
      if (!secret || !expectedHash || !algorithm) {
        console.error('‚ùå Param√®tres manquants pour la v√©rification du secret');
        return false;
      }

      // Calcul du hash du secret fourni
      let calculatedHash: string;
      switch (algorithm) {
        case 'SHA256':
          calculatedHash = CryptoJS.SHA256(secret).toString();
          break;
        case 'SHA512':
          calculatedHash = CryptoJS.SHA512(secret).toString();
          break;
        default:
          console.error(`‚ùå Algorithme non support√© pour la v√©rification: ${algorithm}`);
          return false;
      }

      // Comparaison s√©curis√©e des hashes
      const isValid = calculatedHash.toLowerCase() === expectedHash.toLowerCase();
      
      if (isValid) {
        console.log(`‚úÖ Secret v√©rifi√© avec succ√®s pour le hash: ${expectedHash.substring(0, 16)}...`);
      } else {
        console.warn(`‚ö†Ô∏è √âchec de v√©rification du secret pour le hash: ${expectedHash.substring(0, 16)}...`);
      }

      return isValid;

    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification du secret:', error);
      return false;
    }
  }

  /**
   * √âvalue le statut actuel d'un timelock selon les timestamps
   * 
   * Cette m√©thode impl√©mente la logique temporelle des atomic swaps,
   * d√©terminant si une op√©ration peut √™tre ex√©cut√©e ou annul√©e selon
   * les contraintes de temps √©tablies.
   */
  static evaluateTimelock(
    params: TimelockParams,
    currentStatus: string = 'active'
  ): { status: TimelockStatus; canExecute: boolean; canCancel: boolean; timeRemaining: number } {
    // Utilisation du timestamp actuel ou de celui fourni pour les tests
    const now = params.currentTime || Math.floor(Date.now() / 1000);
    
    // Si l'op√©ration est d√©j√† compl√©t√©e ou annul√©e, retourner le statut existant
    if (currentStatus === 'completed') {
      return {
        status: TimelockStatus.COMPLETED,
        canExecute: false,
        canCancel: false,
        timeRemaining: 0
      };
    }

    if (currentStatus === 'cancelled') {
      return {
        status: TimelockStatus.CANCELLED,
        canExecute: false,
        canCancel: false,
        timeRemaining: 0
      };
    }

    // √âvaluation de la logique temporelle
    const canExecute = now >= params.finishAfter && now < params.cancelAfter;
    const canCancel = now >= params.cancelAfter;
    const isLocked = now < params.finishAfter;

    let status: TimelockStatus;
    let timeRemaining: number;

    if (isLocked) {
      status = TimelockStatus.LOCKED;
      timeRemaining = params.finishAfter - now;
    } else if (canExecute) {
      status = TimelockStatus.EXECUTABLE;
      timeRemaining = params.cancelAfter - now;
    } else if (canCancel) {
      status = TimelockStatus.EXPIRED;
      timeRemaining = 0;
    } else {
      // Cas edge qui ne devrait pas arriver en th√©orie
      status = TimelockStatus.EXPIRED;
      timeRemaining = 0;
    }

    return {
      status,
      canExecute,
      canCancel,
      timeRemaining
    };
  }

  /**
   * Cr√©e des param√®tres de timelock optimis√©s pour les atomic swaps cross-chain
   * 
   * Cette m√©thode calcule automatiquement des d√©lais appropri√©s selon le type
   * de swap et les caract√©ristiques des blockchains impliqu√©es.
   */
  static createOptimalTimelock(
    swapDuration: number = 3600,  // 1 heure par d√©faut
    safetyMargin: number = 1800   // 30 minutes de marge de s√©curit√©
  ): TimelockParams {
    const now = Math.floor(Date.now() / 1000);
    
    // Calcul des timestamps avec des marges de s√©curit√© appropri√©es
    const finishAfter = now + 300;  // 5 minutes pour finaliser la pr√©paration
    const cancelAfter = now + swapDuration + safetyMargin;

    // Validation de la coh√©rence temporelle
    if (cancelAfter <= finishAfter) {
      throw new Error('Configuration de timelock incoh√©rente: cancelAfter doit √™tre apr√®s finishAfter');
    }

    const timelock: TimelockParams = {
      finishAfter,
      cancelAfter,
      currentTime: now
    };

    console.log(`üïê Timelock cr√©√©: ex√©cutable dans ${finishAfter - now}s, expire dans ${cancelAfter - now}s`);
    
    return timelock;
  }

  /**
   * Convertit un hashlock en format compatible avec XRP Ledger
   * 
   * Cette m√©thode adapte nos hashlocks pour √™tre utilis√©s dans les
   * transactions XRP qui ont des exigences de format sp√©cifiques.
   */
  static formatForXRPL(hashlockData: HashlockData): {
    condition: string;    // Hash format√© pour XRPL
    fulfillment: string;  // Secret format√© pour XRPL
  } {
    // XRP Ledger utilise un format hexad√©cimal sp√©cifique pour les conditions
    const condition = hashlockData.hash.toUpperCase();
    
    // Le fulfillment est le secret encod√© en hexad√©cimal
    const fulfillment = Buffer.from(hashlockData.secret, 'utf8').toString('hex').toUpperCase();

    return {
      condition,
      fulfillment
    };
  }

  /**
   * Utilitaire pour afficher des informations de debug sur un hashlock
   * 
   * Cette m√©thode facilite le debugging en fournissant un aper√ßu complet
   * des propri√©t√©s d'un hashlock sans exposer le secret complet.
   */
  static debugHashlock(hashlockData: HashlockData): void {
    console.log('üîç Debug Hashlock:');
    console.log(`  Hash: ${hashlockData.hash}`);
    console.log(`  Secret (tronqu√©): ${hashlockData.secret.substring(0, 8)}...`);
    console.log(`  Algorithme: ${hashlockData.algorithm}`);
    console.log(`  Cr√©√©: ${new Date(hashlockData.createdAt).toLocaleString()}`);
    if (hashlockData.expiresAt) {
      console.log(`  Expire: ${new Date(hashlockData.expiresAt).toLocaleString()}`);
    }
  }
}

// Export des types et de la classe principale
export default HashlockManager;